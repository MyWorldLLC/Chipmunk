
/*
 * Copyright (C) 2020 MyWorld, LLC
 * All rights reserved.
 *
 * This file is part of Chipmunk.
 *
 * Chipmunk is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chipmunk is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Chipmunk.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
	id 'maven-publish'
	//id 'org.asciidoctor.jvm.convert' version '3.1.0'
}

apply plugin: 'java'
apply plugin: 'groovy'

group = 'myworld'
version = rootProject.ext.buildVersion

repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	jmh
}

dependencies {

	implementation 'org.ow2.asm:asm:9.0'
	implementation 'myworld:hummingbird:0.0.1-SNAPSHOT'

	testImplementation 'org.apache.groovy:groovy:4.0.21'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'

    jmh 'org.openjdk.jmh:jmh-core:1.32'
	jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.32'
}

test {
	useJUnitPlatform()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
	main {
	  java {
		srcDir 'src/main/java'
	  }
	}
	
	profiling {
		java {
			srcDir 'src/profiling/java'
			compileClasspath += main.compileClasspath + main.output
			runtimeClasspath += main.output
		}
		resources {
			srcDir 'src/profiling/resources'
		}
	}
	
	jmh {
		java {
			srcDir 'src/jmh/java'
			compileClasspath += main.compileClasspath + main.output + project.configurations.jmh
			runtimeClasspath += main.output
			annotationProcessorPath = project.configurations.jmh

		}
		resources {
			srcDir 'src/jmh/resources'
		}
	}
}

jar {
	archiveBaseName = 'Chipmunk'
}

publishing {
	publications {
		gpr(MavenPublication) {
			groupId = "${project.group}"
			artifactId = 'chipmunk'
			version = "${project.version}"

			from components.java
		}
	}

	repositories {
		mavenLocal()
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/MyWorldLLC/Chipmunk")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
	}
}


//asciidoctor {
//	sourceDir 'src/doc/asciidoc'
//}

clean {
	delete 'build'
	delete 'dist'
}

task jmhCompile(type: JavaCompile, dependsOn: jmhClasses) {
	source file('build/generated/sources/annotationProcessor/java/jmh/')
	classpath = sourceSets.jmh.runtimeClasspath +
			sourceSets.jmh.compileClasspath +
			sourceSets.jmh.output

	destinationDirectory.set(file('build/classes/java/jmh'))
}

task jmh(type: JavaExec, dependsOn: jmhCompile) {
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(21)
	}
	main = 'chipmunk.benchmark.ChipmunkBenchmarks'

	classpath = sourceSets.jmh.runtimeClasspath +
			sourceSets.jmh.compileClasspath +
			sourceSets.jmh.output
}

tasks.named("processJmhResources") {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named("processProfilingResources") {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task runProfiler(type:JavaExec) {
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(21)
	}
    main = 'chipmunk.profiling.ChipmunkProfiler'
    classpath = sourceSets.profiling.runtimeClasspath + sourceSets.profiling.compileClasspath
}
