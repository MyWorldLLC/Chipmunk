# declares the module that all classes/methods/variables following this statement will
# be in. A source file can contain multiple module declarations, and any code following
# each module declaration will execute as part of that module
module chipmunk

# imports symbol 'system' from module chipmunk
import chipmunk.system

# imports all symbols from module chipmunk.coolstuff
from chipmunk.coolstuff import *

# imports all symbols from module chipmunk.morecoolstuff
import chipmunk.morecoolstuff.*

# imports symbol NutCracker from chipmunk.io, aliased as TheNutCracker
from chipmunk.io import NutCracker as TheNutCracker

# imports and aliases multiple classes from a module at once
from chipmunk.io import NutPacker, NutFormat as TheNutPacker, TheNutFormat

class Chippy {

	var age = 2
	var tail
	
	# List of nuts he has
	var nuts = []
	
	# Map of information on what trees he likes
	var trees = {}

	# Common genus shared by all chipmunks, variable is set in the type's namespace.
	# Shared attributes & methods can be accessed by code outside this class via the
	# type name -e.g., Chippy.genus
	shared var genus = "Tamias"
	
	# Constructor
	def Chippy(){
	
		# local variable
		var x = 1234
		
		# instance variable - type convert string literal to integer
		# this will result in coercing the string literal "1234" to an
		# integer
		self.x = "1234" as int

	}
	
	def hideNuts(){
		var tree = choose(trees)
		self.climb(tree)
		# 'in' keyword uses an iterator returned by the instance on the right
		for(var nut in nuts ){
			tree.putInTrunk(nut)
		}
	}
	
	# Method shared by all chipmunks - can only access shared variables of the Chipmunk class and symbols in
	# the module (self refers to the type object)
	shared def getGenus(){
		return genus
	}
}

def throwNut(){
	var nut = Nut()
	nut.dropOnGround()
}

def main(){
	# Create a new instance.
	var chippy = Chippy()
	# This method isn't defined, so this is actually an error... but this is just a demo!
	chippy.doChipmunkThings()
}